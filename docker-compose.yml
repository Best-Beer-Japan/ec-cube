version: "3"

networks:
  backend:
    driver: bridge
  sidekiq:
    driver: bridge
  nginx-proxy:
    external: true

volumes:
  proxy:
    driver: local

  mysql-database:
    driver: local

  redis:
    driver: local

  ### ignore folder volume #####
  var:
    driver: local
  vendor:
    driver: local

services:
  ### ReverseProxy ############################
  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: always
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=jwilder/nginx-proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - "./dockerconfig/nginx/default:/etc/nginx/vhost.d/default"
      - "./dockerconfig/nginx/default_location:/etc/nginx/vhost.d/default_location"
      - proxy:/etc/nginx/vhost.d
      - proxy:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - ec-cube
      - mysql
    networks:
      - nginx-proxy
      - backend

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    depends_on:
      - nginx-proxy
    volumes:
      - proxy:/etc/nginx/vhost.d
      - proxy:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/nginx/certs:rw

  ### ECCube4 ##################################
  ec-cube:
    build:
      context: .
      args:
        # ビルド時のECCubeインストールスクリプトをスキップする場合にtrueを指定する。
        # ビルド時点でDBサーバの起動や接続が出来ない、という場合等にエラーとなるため。
        SKIP_INSTALL_SCRIPT_ON_DOCKER_BUILD: "true"
    volumes:
      - ".:/var/www/html:cached"
      ### 同期対象からコストの重いフォルダを除外 #####################
      - "var:/var/www/html/var"
      - "vendor:/var/www/html/vendor"
    networks:
      - backend
    environment:
      VIRTUAL_HOST: ${DOMAIN}
      LETSENCRYPT_HOST: ${DOMAIN}
      LETSENCRYPT_EMAIL: sysadmin@bestbeerjapan.com
    restart: always

  ### Corpse API ##################################
  api: &api_base
    build: ./corpse-api-brewery
    command: /bin/bash -c "rm -f /app/tmp/pids/server.pid && bundle exec rails s -b 0.0.0.0"
    volumes:
      - "./corpse-api-brewery:/app"
    ports:
      - "3000:3000"
    tty: true
    networks:
      - backend
      - sidekiq
    environment:
      VIRTUAL_HOST: ${DOMAIN}
      RAILS_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_DATABASE: ${DB}
      RAILS_DATABASE_PASSWORD: ${DB_PASSWORD}
      BREWERY_ID: ${BREWERY_ID}
      FILE_DOMAIN: https://${DOMAIN}
      RAILS_MATOME_EC_HOST: ${URL_MATOME}
      REDIS_URL: redis://redis:6379
    restart: always

  sidekiq:
    <<: *api_base
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]
    volumes:
      - "./corpse-api-brewery:/app"
      - "./dockerconfig/sidekiq/sidekiq.yml:/app/config/sidekiq.yml"
    ports:
      - "3030:3000"
    networks:
      - backend
      - sidekiq
    depends_on:
      - redis
    restart: always

  redis:
    image: redis:4.0
    volumes:
      - "redis:/data"
    networks:
      - sidekiq
    command: redis-server --appendonly yes
    restart: always

  ### MySQL ##################################
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_DATABASE: ${DB}
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql-database:/var/lib/mysql
      - "./dockerconfig/mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf"
      - "./logs/mysql:/var/log/mysql"
    ports:
      - 13306:3306
    networks:
      - backend
    restart: always
